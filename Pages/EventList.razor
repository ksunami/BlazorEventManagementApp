@page "/events"
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject BlazorEventManagementApp.Data.EventService EventService

<h3 class="mb-3"><i class="bi bi-calendar-week"></i> Events</h3>

@if (isLoading)
{
  <p class="text-muted"><em>Loading eventsâ€¦</em></p>
}
else if (totalCount == 0)
{
  <div class="alert alert-warning"><i class="bi bi-inbox"></i> No events available.</div>
}
else
{
  <Virtualize ItemsProvider="LoadEvents" ItemSize="64">
    <ItemContent Context="e">
      <a class="list-group-item list-group-item-action d-flex align-items-center gap-3" href="@($"/eventcard/{e.Id}")">
        <div class="flex-grow-1">
          <div class="fw-semibold">@e.EventName</div>
          <div class="small text-muted">@e.Location</div>
        </div>
        <span class="badge rounded-pill badge-date">
          @e.Date.ToShortDateString()
        </span>
        <i class="bi bi-chevron-right text-muted"></i>
      </a>
    </ItemContent>
  </Virtualize>
}

@code {
  private int totalCount;
  private bool isLoading = true;

  protected override async Task OnInitializedAsync()
  {
    totalCount = await EventService.GetEventsCountAsync();
    isLoading = false;
  }

  private async ValueTask<ItemsProviderResult<BlazorEventManagementApp.Models.Event>> LoadEvents(ItemsProviderRequest request)
  {
    var slice = await EventService.GetEventsAsync(request.StartIndex, request.Count);
    return new ItemsProviderResult<BlazorEventManagementApp.Models.Event>(slice, totalCount);
  }
}
